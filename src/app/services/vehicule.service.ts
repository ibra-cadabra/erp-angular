import { Injectable, signal } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Vehicule } from '../models/vehicule.model';
import { environment } from '../environment/environment';
import {map, Observable, tap} from 'rxjs';
import {NewVehicule} from "../models/new-vehicule.model";

@Injectable({ providedIn: 'root' })
export class VehiculeService {
  private readonly apiUrl = `${environment.apiUrl}/vehicules`;

  // ‚úÖ Signal contenant tous les v√©hicules (liste globale)
  private _vehicules = signal<Vehicule[]>([]);
  readonly vehicules = this._vehicules.asReadonly();

  // üöß Signal de v√©hicules du d√©p√¥t (non utilis√© ici, √† activer si besoin)
  constructor(private http: HttpClient) {}

  // üîÑ Charger tous les v√©hicules depuis l‚ÄôAPI
  loadVehicules() {
    this.http.get<Vehicule[]>(this.apiUrl).subscribe(v => this._vehicules.set(v));
    console.log('‚úÖ V√©hicules charg√©s :', this._vehicules());
  }

// ‚ûï Ajouter un vehicular et retourner l'observable (bonne pratique Angular)
  addVehicule(vehicule: NewVehicule): Observable<Vehicule> {
    return this.http.post<Vehicule>(this.apiUrl, vehicule).pipe(
        tap(() => this.loadVehicules())
    );
  }

  // ‚ùå Supprimer un v√©hicule par ID
  deleteVehicule(idVeh: number) {
    this.http.delete(`${this.apiUrl}/${idVeh}`).subscribe({
      next: () => {
        this._vehicules.update(v => v.filter(veh => veh.idVeh !== idVeh));
        this.loadVehicules();
        console.log('‚úÖ V√©hicule supprim√©');
      },
      error: err => console.error('‚ùå Erreur suppression v√©hicule', err)
    });
  }

  // ‚úèÔ∏è Mettre √† jour un v√©hicule existant
 /*
  updateVehicule(idVeh: number, changes: Partial<Vehicule>) {
    this.http.put<Vehicule>(`${this.apiUrl}/${idVeh}`, changes).subscribe({
      next: updated => {
        this._vehicules.update(v =>
            v.map(veh => veh.idVeh === idVeh ? updated : veh)
        );
        this.loadVehicules();
        console.log('‚úÖ V√©hicule mis √† jour :', updated);
      },
      error: err => console.error('‚ùå Erreur update v√©hicule', err)
    });
  }
*/
  // üîç V√©rifie si une plaque d‚Äôimmatriculation existe d√©j√†
  checkRegistrationPlateExists(registrationPlate: string) {
    const plate = registrationPlate.toUpperCase();
    return this.http.get<{ exists: boolean }>(`${this.apiUrl}/exists/${plate}`).pipe(
        map(res => res.exists) // ‚úÖ Corrige ici
    );
  }

  // üöó Attribuer ou retirer un v√©hicule
  //
  // Si idTec ‚â† null ‚Üí le v√©hicule est affect√© √† un technicien
  // Si idTec = null ‚Üí le v√©hicule retourne au d√©p√¥t (idDep doit √™tre fourni)
  // üöó Attribuer ou retirer un v√©hicule
  assignVehicule(data: {
    _id: string; // obligatoire pour historique (MongoDB _id du v√©hicule)
    idTec: number | null;
    idDep: number | null;
    createdBy: number;
  }) {
    return this.http.post(`${this.apiUrl}/assign`, data).pipe(
        tap(() => this.loadVehicules())
    );
  }


}
